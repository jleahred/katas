use dynparser as dp;

pub(crate) fn parse_peg() -> dp::parser::expression::SetOfRules {
  dp::rules!(
      r#"rule_name"# => dp::and!(dp::rep!(dp::lit!("."), 0, 1), dp::ref_rule!(r#"symbol"#), dp::rep!(dp::and!(dp::lit!("."), dp::ref_rule!(r#"symbol"#)), 0))
      , r#"parenth"# => dp::and!(dp::lit!("("), dp::ref_rule!(r#"_"#), dp::ref_rule!(r#"expr"#), dp::ref_rule!(r#"_"#), dp::or!(dp::lit!(")"), dp::error!("unbalanced parethesis: missing ')'")))
      , r#"main"# => dp::ref_rule!(r#"grammar"#)
      , r#"symbol"# => dp::and!(dp::ematch!(chlist r#"_"#  , from 'a', to 'z' , from 'A', to 'Z' , from '0', to '9' ), dp::rep!(dp::ematch!(chlist r#"_'""#  , from 'a', to 'z' , from 'A', to 'Z' , from '0', to '9' ), 0))
      , r#"atom_or_par"# => dp::or!(dp::ref_rule!(r#"atom"#), dp::ref_rule!(r#"parenth"#))
      , r#"literal"# => dp::or!(dp::ref_rule!(r#"lit_noesc"#), dp::ref_rule!(r#"lit_esc"#))
      , r#"grammar"# => dp::rep!(dp::ref_rule!(r#"rule"#), 1)
      , r#"lit_noesc"# => dp::and!(dp::ref_rule!(r#"_'"#), dp::rep!(dp::and!(dp::not!(dp::ref_rule!(r#"_'"#)), dp::dot!()), 0), dp::ref_rule!(r#"_'"#))
      , r#"lit_esc"# => dp::and!(dp::ref_rule!(r#"_""#), dp::rep!(dp::or!(dp::ref_rule!(r#"esc_char"#), dp::ref_rule!(r#"hex_char"#), dp::and!(dp::not!(dp::ref_rule!(r#"_""#)), dp::dot!())), 0), dp::ref_rule!(r#"_""#))
      , r#"line_comment"# => dp::and!(dp::lit!("//"), dp::rep!(dp::and!(dp::not!(dp::ref_rule!(r#"eol"#)), dp::dot!()), 0))
      , r#"eol"# => dp::or!(dp::lit!("\r\n"), dp::lit!("\n"), dp::lit!("\r"))
      , r#"named"# => dp::and!(dp::ref_rule!(r#"symbol"#), dp::lit!(":"))
      , r#"mchars"# => dp::rep!(dp::and!(dp::not!(dp::lit!("]")), dp::not!(dp::and!(dp::dot!(), dp::lit!("-"))), dp::dot!()), 1)
      , r#"error"# => dp::and!(dp::lit!("error"), dp::ref_rule!(r#"_"#), dp::lit!("("), dp::ref_rule!(r#"_"#), dp::ref_rule!(r#"literal"#), dp::ref_rule!(r#"_"#), dp::lit!(")"))
      , r#"esc_char"# => dp::or!(dp::lit!("\\r"), dp::lit!("\\n"), dp::lit!("\\t"), dp::lit!("\\\\"), dp::lit!("\\\""))
      , r#"mline_comment"# => dp::and!(dp::lit!("/*"), dp::rep!(dp::and!(dp::not!(dp::lit!("*/")), dp::dot!()), 0), dp::lit!("*/"))
      , r#"or"# => dp::and!(dp::ref_rule!(r#"and"#), dp::rep!(dp::ref_rule!(r#"transf2"#), 0, 1), dp::rep!(dp::and!(dp::ref_rule!(r#"_"#), dp::lit!("/"), dp::ref_rule!(r#"_"#), dp::ref_rule!(r#"or"#)), 0, 1))
      , r#"rep_or_neg"# => dp::or!(dp::and!(dp::ref_rule!(r#"atom_or_par"#), dp::rep!(dp::or!(dp::lit!("*"), dp::lit!("+"), dp::lit!("?")), 0, 1)), dp::and!(dp::lit!("!"), dp::ref_rule!(r#"atom_or_par"#)))
      , r#"rule"# => dp::and!(dp::ref_rule!(r#"_"#), dp::ref_rule!(r#"rule_name"#), dp::ref_rule!(r#"_"#), dp::lit!("="), dp::ref_rule!(r#"_"#), dp::ref_rule!(r#"expr"#), dp::ref_rule!(r#"_eol"#), dp::ref_rule!(r#"_"#))
      , r#"expr"# => dp::ref_rule!(r#"or"#)
      , r#"transf2"# => dp::and!(dp::ref_rule!(r#"_1"#), dp::ref_rule!(r#"_"#), dp::lit!("->"), dp::rep!(dp::and!(dp::not!(dp::ref_rule!(r#"eol"#)), dp::dot!()), 0))
      , r#"_"# => dp::rep!(dp::or!(dp::lit!(" "), dp::ref_rule!(r#"eol"#), dp::ref_rule!(r#"comment"#)), 0)
      , r#"comment"# => dp::or!(dp::ref_rule!(r#"line_comment"#), dp::ref_rule!(r#"mline_comment"#))
      , r#"match"# => dp::and!(dp::lit!("["), dp::or!(dp::and!(dp::ref_rule!(r#"mchars"#), dp::rep!(dp::ref_rule!(r#"mbetween"#), 0)), dp::rep!(dp::ref_rule!(r#"mbetween"#), 1)), dp::lit!("]"))
      , r#"atom"# => dp::or!(dp::ref_rule!(r#"literal"#), dp::ref_rule!(r#"match"#), dp::ref_rule!(r#"rule_name"#), dp::ref_rule!(r#"dot"#))
      , r#"and"# => dp::or!(dp::ref_rule!(r#"error"#), dp::and!(dp::rep!(dp::ref_rule!(r#"named"#), 0, 1), dp::ref_rule!(r#"rep_or_neg"#), dp::rep!(dp::and!(dp::ref_rule!(r#"_1"#), dp::ref_rule!(r#"_"#), dp::not!(dp::and!(dp::ref_rule!(r#"rule_name"#), dp::ref_rule!(r#"_"#), dp::or!(dp::lit!("="), dp::lit!("{")))), dp::ref_rule!(r#"and"#)), 0)))
      , r#"_""# => dp::lit!("\"")
      , r#"mbetween"# => dp::and!(dp::dot!(), dp::lit!("-"), dp::dot!())
      , r#"dot"# => dp::lit!(".")
      , r#"_'"# => dp::lit!("'")
      , r#"hex_char"# => dp::and!(dp::lit!("\\0x"), dp::ematch!(chlist r#""#  , from '0', to '9' , from 'A', to 'F' ), dp::ematch!(chlist r#""#  , from '0', to '9' , from 'A', to 'F' ))
      , r#"_1"# => dp::or!(dp::lit!(" "), dp::ref_rule!(r#"eol"#))
      , r#"_eol"# => dp::and!(dp::rep!(dp::or!(dp::lit!(" "), dp::ref_rule!(r#"comment"#)), 0), dp::ref_rule!(r#"eol"#))
  )
}
